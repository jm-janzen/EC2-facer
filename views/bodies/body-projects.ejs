<div
    id='body-projects'
>
    <p>
        <ul>
            <li><strong>This Website</strong> (2016 - present)</li>
                <ul>
                    <li>This website is served by a NodeJS server (more on that below), with dynamic HTML generated by the templating language
                        <a href="http://ejs.co/">EJS</a>.  It makes use of a non-trivial amount of client-side JavaScript processing (the
                        countdown timer above), jQuery (the git log background), and AJAX (for all navigation). It's my small foothold on
                        the internet, and I take great pleasure in its maintenance and improvement.
                    </li>
                    <li>Fun fact: jmjanzen.com is a sort of New & Improved version of another I whipped up almost exactly one year ago.  In fact,
                        most of the HTML and textual content for this website was ripped straight from that humble skeleton (you can see its source 
                        <a href="https://github.com/jm-janzen/home">here</a>).
                    </li>
                </ul>
            </li>
            <li><strong>Nullportal</strong> (2016 - present)</li>
                <ul>
                    <li>Another website, actually served by a the same server (facer), viewable at
                        <a  href='http://www.nullportal.com'>nullportal.com</a>.
                    </li>
                </ul>
            </li>
            <li><strong>Facer Server</strong> (2016 - present)</li>
                <ul>
                    <li><a href="https://github.com/jm-janzen/EC2-facer/blob/master/facer.js">Source code</a>
                    </li>
                    <li>Written primarily according to the <a href="http://www.ecma-international.org/ecma-262/5.1">ECMAScript 5.1</a> JavaScript
                        specification, with particular attention to the Strict Variant (enhanced error checking, non-silent failure).
                    </li>
                    <li>Hosted on Amazon Web Services' <a href="https://aws.amazon.com/ec2/">
                        Elastic Compute Cloud</a> service.
                    </li>
                    <li>Githooks (you'll have to do your own research - this is my secret sauce!). :)
                    </li>
                </ul>
            <li><strong>Ubuntu Server</strong></li>
                <ul>
                    <li>NAT Filtering, using Debian <a href="http://packages.ubuntu.com/trusty/iptables">iptables</a> package, to route HTTP requests
                        from port 80 to Facer server on alternate port.  Details
                        <a href="https://github.com/jm-janzen/notes/blob/master/iptables.txt">here</a> (Github), or
                        <a href="/notes/iptables">here</a> (personal notes hosting).
                    </li>
                    <li>Tools
                        <ul>
                            <li>GNU screen package
                            </li>
                            <li>git
                            </li>
                            <li>vim
                            </li>
                            <li>bash, tcsh, zsh
                            </li>
                            <li>forever monitor node-package
                            </li>
                        </ul>
                    </li>
                    <li>Customization
                        <ul>
                            <li>GNU screen enhancements
                            </li>
                            <li>vim-mode
                            </li>
                            <li>git aliases
                            </li>
                            <li>other aliases
                            </li>
                            <li>dot files
                            </li>
                        </ul>
                    </li>
                    <li>Scripts
                        <ul>
                            <li><a href="/scripts/#">Convenience scripts</a>
                            </li>
                            <li>Githook scripts
                            </li>
                            <li>upstart scripts
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li><strong>Navpad CLI</strong> (2015 - present)</li>
                <ul>
                    <li>My idea for an interactive command line tool (work-in-progress sources
                        <a href="https://github.com/jm-janzen/navpad">here</a>).  The idea is to make a dead-simple Linux file system
                        navigator, which would be primarily driven via a keyboard's numpad.  Even at this very early stage, it succeeds
                        in this; however, there are bugs to squash (for instance, the Bash version, doesn't like files containing spaces)
                        before I feel comfortable sharing it with a greater audience.
                    </li>
                    <li>Originally written in Bash, for the twin reasons that 1) it was easy to get started, and 2) Bash was a scripting
                        language I wanted to delve into more detail with.  This latter justification is one that is repeated in many of
                        my projects.
                    </li>
                    <li>Some time after the project's inception, I shifted most of my development to a
                        <a href="https://github.com/jm-janzen/navpad/tree/navpad_c">C branch</a>, mostly because C provided me with access
                        to the easy Linux directory definitions by including
                        <a href="http://pubs.opengroup.org/onlinepubs/007908775/xsh/dirent.h.html">dirent.h</a>.  This made manipulating
                        the filesystem much easier.
                    </li>
                    <li>Presently, the project is undergoing the transition to C++.  This is because, while fundamental types like
                        <i>char</i> might be extremely flexible, I missed having access to compound types like <i>String</i>.
                    </li>
                </ul>
            </li>
            <li><strong>Monochrome Mapping Project</strong> (2012 - 2013, Doom (video-game))</li>
                <ul>
                    <li><a href="http://www.doomworld.com/vb/wads-mods/62724-release-monochrome-mapping-project-latest-fix-august-1st-2013/" >
                        Project 'homepage' (Doomworld forum)</a></li>
                    <li><a href="https://www.dropbox.com/s/qfngupul1soy24m/DWMMP.txt">
                        Project Readme document (Dropbox)</a></li>
                    <li>A disaster of a Doom community project that I led. My team and I competed directly with a sister project, which
                        was started at about the same time.  We beat them to release by two years, but the quality and adherence to standards
                        of our project suffered.  I learned several valuable lessons while undertaking this project.
                    </li>
                </ul>
            <li><strong>The Dreaded Word</strong> (2013, Doom)
                <ul>
                    <li><a href="http://www.doomworld.com/vb/wads-mods/64518-wip-the-dreaded-word-1-of-3-levels-describing-a-journey-from-ruins-to-techbase/">
                        Project 'homepage' (Doomworld forum)</a></li>
                    <li>Another Doom project - a single map that I worked on, implementing feedback from community playtesters.
                        This one went a lot more smoothly.</li>
                </ul>
            </li>
            <li><strong>College Programmes & Applications</strong>
                <ul>
                    <li>Too many to mention, and unmentioned because while some of them may have been rather elegant, not a one
                        was especially thrilling or even satisfying to use. They were written with an eye, firstly to learning, and secondly
                        to satisfy grading criteria.  That said, I enjoyed almost every moment of designing, writing, and testing these projects.</li>
                    <li>As an aside, I will mention one key difference between beginner and later-year programming classes: During the first year
                        one could quite easily sit and start coding, and know that if one threw enough time at any project, that it would eventually be
                        completed to satisfaction. I likened this to mindlessly shovelling snow.<br/>
                        The sharp contrast came in later years, when I finally discovered the true utility of design and planning.  Projects have
                        become more complicated, and now I design everything. We'd been told the importance of design earlier on in our education, but
                        I don't think a one of us took it to heart until recently.
                    </li>
                </ul>
            </li>
        </ul>
    </p>
</div>
